"""
Django settings for testPAS project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

import environ
from dotenv import load_dotenv
load_dotenv()
BASE_DIR = Path(__file__).resolve().parent.parent
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env = environ.Env()
environ.Env.read_env(
    env_file=os.path.join(BASE_DIR, ".env")
)
SECRET_KEY = 'holdensecret'
DEBUG = True   # Set to True for development, False for production
if not SECRET_KEY:
    raise ValueError("The SECRET_KEY setting must not be empty.")


# TEST_MODE = False  # Set to True for 112-minute testing mode
BASE_URL = os.getenv('BASE_URL', 'http://127.0.0.1:8000')  # Default to local development if not set
LOGIN_URL = '/login/'  # Default login URL for the application

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = os.path.dirname(os.path.abspath(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')

ALLOWED_HOSTS = ['*']
# PostgreSQL configuration (for use on Heroku)
DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': os.getenv('DB_NAME'),
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': '5432',
    }
}

# # # SendGrid configuration
# SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',  
    'testpas',
    'django_celery_beat',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# ROOT_URLCONF = "testpas.urls"
ROOT_URLCONF = 'config.urls'
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


#Time settings
USE_TZ = True
TIME_ZONE = 'America/Chicago'
# Celery settings

# Testing Configuration
# TEST_MODE = os.getenv('TEST_MODE')
TEST_MODE=True
TIME_COMPRESSION = True
SECONDS_PER_DAY = 15 # Use 86400 for real-world days
# TEST_TIME_SCALE = 10  # 1 day = 10 seconds for testing
# TEST_TIME_SCALE = float(os.getenv('TEST_TIME_SCALE', '5'))  # 1 day = 1 second (or set to 60 for minutes)
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_TASK_TRACK_STARTED = True
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Chicago'
CELERY_ENABLE_UTC = False
CELERY_BEAT_SCHEDULE = {
    'run-timeline-checks': {
        'task': 'testpas.tasks.run_daily_timeline_checks',
        'schedule': 15.0 if TIME_COMPRESSION else 86400.0,
    },
}
# CELERY_BEAT_SCHEDULE = {
#     # 'send-emails-every-minute': {
#     #     'task': 'testpas.tasks.send_scheduled_emails',
#     #     'schedule': 10.0,  # Run every 10 seconds to catch minute-based triggers
    
# }


# Define how many seconds represent one simulated "day"

# Email settings
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False  
EMAIL_HOST_USER = 'example@gmail.com'
EMAIL_HOST_PASSWORD = 'put_app_key_here'
DEFAULT_FROM_EMAIL = 'example@gmail.com'
# DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER') ## Change to your email address when run
# # WSGI_APPLICATION = "testpas.wsgi.application"
WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# DATABASES = {'default': {}}
# DATABASES = {
#     'default': dj_database_url.config(default='postgres://localhost:5432')
# }
ATOMIC_REQUESTS = True

# if "DATABASE_NAME" in os.environ:
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql_psycopg2',
#             'NAME': env('DATABASE_NAME'),
#             'USER' : env('DATABASE_USER'),
#             'PASSWORD' : env('DATABASE_PASS'),
#             'HOST' : env('DATABASE_HOST'),
#             'PORT' : env('DATABASE_PORT'),
#         }
#     }



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = BASE_DIR / "staticfiles"

SESSION_COOKIE_AGE = 86400  # 1 day in seconds
# Make sure the session expires when the user closes the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

STORAGES = {
    # Enable WhiteNoise's GZip and Brotli compression of static assets:
    # https://whitenoise.readthedocs.io/en/latest/django.html#add-compression-and-caching-support
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# STATIC_URL = "static/"
# # The `STATIC_ROOT` setting in Django is used to specify the directory where Django will collect all
# # static files from various applications into one location when you run the `collectstatic` management
# # command. This directory is typically used for serving static files in production.
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'staticfiles'),
# ]

# # Whitenoise settings to handle static files in production
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

WHITENOISE_KEEP_ONLY_HASHED_FILES = True
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
